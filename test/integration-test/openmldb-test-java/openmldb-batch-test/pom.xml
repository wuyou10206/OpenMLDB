<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>openmldb-test-java</artifactId>
        <groupId>com.4paradigm.openmldb</groupId>
        <version>0.1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>openmldb-batch</artifactId>

    <properties>
        <maven.compiler.source>8</maven.compiler.source>
        <maven.compiler.target>8</maven.compiler.target>

        <aspectj.version>1.8.10</aspectj.version>
        <openmldb.batch.version>0.6.0</openmldb.batch.version>
        <scala.version>2.12.8</scala.version>
        <scala.binary.version>2.12</scala.binary.version>
        <spark.version>3.0.0</spark.version>
        <openmldb.batch.version>0.4.3</openmldb.batch.version>
        <openmldb.native.version>0.4.3-macos</openmldb.native.version>
        <openmldb.test.common.version>0.1.0-SNAPSHOT</openmldb.test.common.version>
        <spark.dependencyScope>provided</spark.dependencyScope>

    </properties>
    <dependencies>
        <dependency>
            <groupId>com.4paradigm.openmldb</groupId>
            <artifactId>openmldb-batch</artifactId>
            <version>${openmldb.batch.version}</version>
        </dependency>
        <dependency>
            <groupId>com.4paradigm.openmldb</groupId>
            <artifactId>openmldb-test-common</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>org.scala-lang</groupId>
            <artifactId>scala-library</artifactId>
            <version>${scala.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-core_${scala.binary.version}</artifactId>
            <version>${spark.version}</version>
            <scope>${spark.dependencyScope}</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-sql_${scala.binary.version}</artifactId>
            <version>${spark.version}</version>
            <scope>${spark.dependencyScope}</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>net.alchim31.maven</groupId>
                <artifactId>scala-maven-plugin</artifactId>
                <version>3.2.1</version>
                <!--                <configuration>-->
                <!--                    <jvmArgs>-->
                <!--                        <jvmArg>-Xms2048m</jvmArg>-->
                <!--                        <jvmArg>-Xmx2048m</jvmArg>-->
                <!--                        <jvmArg>-XX:PermSize=${PermGen}</jvmArg>-->
                <!--                        <jvmArg>-XX:MaxPermSize=${MaxPermGen}</jvmArg>-->
                <!--                        <jvmArg>-XX:ReservedCodeCacheSize=${CodeCacheSize}</jvmArg>-->
                <!--                    </jvmArgs>-->
                <!--                </configuration>-->
                <executions>
                    <!--重要,将scala的编译提前到process-resources阶段,不然编译Java时会报找不到Scala的类-->
                    <execution>
                        <id>scala-compile-first</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>scala-test-compile</id>
                        <phase>process-test-resources</phase>
                        <goals>
                            <goal>testCompile</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.20.1</version>
                <configuration>
                    <reuseForks>false</reuseForks>
                    <forkCount>1</forkCount>
                    <suiteXmlFiles>
                        <suiteXmlFile>${suite}</suiteXmlFile>
                    </suiteXmlFiles>
                    <forkMode>always</forkMode>
                    <argLine>
                        -javaagent:"${settings.localRepository}/org/aspectj/aspectjweaver/${aspectj.version}/aspectjweaver-${aspectj.version}.jar"
                    </argLine>
                    <!-- 使allure-results在target文件夹下（很重要） -->
                    <workingDirectory>target/</workingDirectory>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>org.aspectj</groupId>
                        <artifactId>aspectjweaver</artifactId>
                        <version>${aspectj.version}</version>
                    </dependency>
                </dependencies>
            </plugin>
        </plugins>
    </build>
</project>